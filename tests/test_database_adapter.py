"""
Specific tests for DatabaseAdapter.
"""
import pytest
from .conftest import User
from sqlalchemy.exc import IntegrityError
from .test_adapters import AdapterTestSuite
from ..src.zerocrud.adapters import DatabaseAdapter

class TestDatabaseAdapter(AdapterTestSuite):
    """Specific tests for DatabaseAdapter."""
    
    @pytest.fixture
    def adapter(self, db_adapter):
        """Implements the fixture required by AdapterTestSuite."""
        return db_adapter
    
    def test_session_commit_on_create(self, adapter, sample_user_data):
        """Test that create commits to the database."""
        user = adapter.create(sample_user_data)
        
        # Create new session to verify persistence
        new_session = adapter.session.__class__(adapter.session.bind)
        retrieved = new_session.get(User, user.id)
        
        assert retrieved is not None
        assert retrieved.name == sample_user_data["name"]
        new_session.close()
    
    def test_database_constraints(self, adapter):
        """Test that respects database constraints."""
        # This would depend on your specific User model
        # Example if email was unique:
        # adapter.create({"name": "User1", "email": "same@test.com"})
        # 
        # with pytest.raises(IntegrityError):
        #     adapter.create({"name": "User2", "email": "same@test.com"})
        pass
    
    def test_refresh_after_create(self, adapter, sample_user_data):
        """Test that refresh brings values generated by DB."""
        user = adapter.create(sample_user_data)
        
        # ID should be generated by the database
        assert user.id is not None
        assert isinstance(user.id, int)
    
    def test_session_rollback_behavior(self, adapter, sample_user_data):
        """Test behavior with session rollback."""
        user = adapter.create(sample_user_data)
        original_count = adapter.count()
        
        # Simulate error and rollback
        try:
            adapter.session.rollback()
            # Note: In this case the record was already committed
            # This test is more conceptual
        except:
            pass
        
        # The record still exists because it was already committed
        assert adapter.get(user.id) is not None